
// pipe 的目的是 可以读取一点写入一点（减少内存使用，避免内存溢出），
  // 监听可读流的触发事件，将获取到的数据写入到可写流中，如果返回false
  // ，则暂定读取，读取完毕后触发drain事件，在继续读取，知道最终完毕，
  // 我们无法去对读取的数据进行操作，如果需要操作读取的数据，需要使用
  // on('data')...